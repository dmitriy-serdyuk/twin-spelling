#!/usr/bin/env python
import argparse
from torch.optim import Adam
from torch.utils.data import DataLoader

from twinnet.dataset import SpellCheckData


def train_epoch(train_stream, model, optimizer):
    model.train()
    for input, target in train_stream:
        model.zero_grad()

        loss = model.cost(input, target)

        loss.backward()
        optimizer.step()


def validate(valid_stream, model):
    model.validate()

    total_loss = 0.
    n_examples = 0
    for input, target in valid_stream:
        loss = model.cost(input, target)

        predicted = model(input)

        total_loss += loss
        n_examples += 1

    average_loss = total_loss / n_examples


def main(mode, length, prob, epochs, batch_size, learning_rate):
    if mode == 'train':
        train_data = SpellCheckData(length, 'train', prob)
        valid_data = SpellCheckData(length, 'valid', prob)

        train_stream = DataLoader(train_data, batch_size, shuffle=True)
        valid_stream = DataLoader(valid_data, batch_size, shuffle=False)

        # TODO
        model = None

        optimizer = Adam(model.parameters(), lr=learning_rate)

        for epoch in range(epochs):
            train_epoch(train_stream, model, optimizer)
            validate(valid_stream, model)
    else:
        raise NotImplementedError


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("mode", choices=['train', 'test'])
    parser.add_argument("--length", type=int, default=10,
                        help="Sequence length for training and testing")
    parser.add_argument("--prob", type=float, default=0.3,
                        help="Probability of corrupting a character")
    parser.add_argument("--epochs", type=int, default=10,
                        help="Epochs to train")
    parser.add_argument("--batch-size", type=int, default=32,
                        help="Batch size")
    parser.add_argument("--learning-rate", type=float, default=1.e-4,
                        help="Learning rate")

    args = parser.parse_args()
    main(**args.__dict__)
